savehistory("~/.Rhistory")
save.image("~/.RData")
update.packages(ask='graphics',checkBuilt=TRUE)
update.packages(ask='graphics',checkBuilt=TRUE)
update.packages(ask='graphics',checkBuilt=TRUE)
library(data.table)
DT <- data.table(x=1:5)
DT[, y := x^2]
dt
DT
library(data.table)
DT <- data.table(x=1:5, y=6:10, z=11:15)
DT[, m := log2( (x+1) / (y+1) )]
DT
DT <- data.table(x=1:5, y=6:10, z=11:15)
DT[, m := { tmp <- (x + 1) / (y + 1); log2(tmp) }]
DT
library(data.table); library(microbenchmark)
big_df <- data.frame(x=rnorm(1E6), y=sample(letters, 1E6, TRUE))
big_dt <- data.table(big_df)
microbenchmark( big_df$z <- 1, big_dt[, z := 1] )
install.package(microbenchmark)
install_package("microbenchmark")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
library(data.table); library(microbenchmark)
big_df <- data.frame(x=rnorm(1E6), y=sample(letters, 1E6, TRUE))
big_dt <- data.table(big_df)
microbenchmark( big_df$z <- 1, big_dt[, z := 1] )
DT <- data.table(x=1:5, y=6:10, gp=c('a', 'a', 'a', 'b', 'b'))
DT[, z := mean(x+y), by=gp]
DT
DT <- data.table(x=1:5, y=6:10, gp=c('a', 'a', 'a', 'b', 'b'))
DT[, list(z=mean(x + y)), by=gp]
DT
data.table()[, ls(all=TRUE)]
set.seed(123); library(data.table); library(microbenchmark)
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[, .N, by=x]
table(DT$x)
DT <- data.table(x=factor(sample(letters[1:3], 1E5, TRUE)))
microbenchmark( tbl=table(DT$x), DT=DT[, .N, by=x] )
DT <- data.table(x=rnorm(10), y=rnorm(10), z=rnorm(10), id=letters[1:10])
DT[, lapply(.SD, mean), .SDcols=c('x', 'y', 'z')]
lapply(DT[,1:3, with=FALSE], mean)
DT
big_df <- data.frame(x=rnorm(1E6), y=rnorm(1E6))
file <- tempfile()
write.table(big_df, file=file, row.names=FALSE, col.names=TRUE, sep="\t", quote=FALSE)
microbenchmark( fread=fread(file), r.t=read.table(file, header=TRUE, sep="\t"), times=1 )
unlink(file)
file
q()
quiz4
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz4
quiz4()
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz4()
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz4()
?jpeg
library("jpeg", lib.loc="~/R/win-library/3.2")
detach("package:jpeg", unload=TRUE)
vignette(jpeg)
packageDescription(jpeg())
packageDescription(jpeg
)
jpeg
?jpeg
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz2
quiz2()
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz2()
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz2()
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz2()
?quantile
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz2()
seq(0, 1, 0,1)
seq(0, 1, 0.1)
quantile(readJPEG("./data/getdataJeff.jpg"), seq(0, 1, 0.1))
quantile(readJPEG("./data/getdataJeff.jpg", native = TRUE), seq(0, 1, 0.1))
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz2()
quantile(readJPEG("./data/getdataJeff.jpg", native = TRUE), c(0.3, 0.8), type = 1)
quantile(readJPEG("./data/getdataJeff.jpg", native = TRUE), c(0.3, 0.8), type = 2)
quantile(readJPEG("./data/getdataJeff.jpg", native = TRUE), c(0.3, 0.8), type = 3)
quantile(readJPEG("./data/getdataJeff.jpg", native = TRUE), c(0.3, 0.8), type = 4)
quantile(readJPEG("./data/getdataJeff.jpg", native = TRUE), c(0.3, 0.8), type = 5)
quantile(readJPEG("./data/getdataJeff.jpg", native = TRUE), c(0.3, 0.8), type = 6)
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz2()
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz2()
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz2()
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz2()
quiz3()
library(dplyr)
library(data.table)
library(dplyr)
if(!file.exists("./data"))dir.create("./data")
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
gdp_row <- fread(input = fileUrl1, skip = 4, nrows = 231, select = c(1:2,4:5))
setnames(gdp_row, c("CountryCode", "Ranking", "LongName", "gdp"))
gdp <- gdp_row[1:190,]
cty_row <- fread(input = fileUrl2, select = (1:9))
print(sum(!is.na(match(gdp$CountryCode, cty_row$CountryCode))))
print(arrange(gdp, desc(Ranking))$LongName[13])
str(gdp)
gdp
cty_row
cty_row_dt <- big_dt(cty_row)
str(gdp)
str(cty_row)
tables
tables()
setkey(cty_row, CoutryCode)
setkey(cty_row, "CoutryCode")
str(cty_row)
rm(big_df)
cty_row_dt <- tbl_df(cty_row)
str(cty_row_dt)
cty_row_dt
setkey(cty_row_dt, CountryCode)
names(cty_row_dt)
setkey(cty_row_dt, 1)
colnames(cty_row_dt)
setkey(cty_row_dt, CountryCode)
cty_row_dt
str(cty_row_dt)
rename(cty_row_dt, cty_row_df)
cty_tbl_df <- tbl_df(cty_row)
rm(cty_row_dt)
cty_dt <- data.table(cty_tbl_df)
setkey(cty_dt,1)
setkey(cty_dt, CountryCode)
cty_dt
gdp_dt <- data.table(gdp)
setkey(gdp_dt, CountryCode)
merge(gdp_dt, cty_dt)
gdp_cty_merge <- merge(gdp_dt, cty_dt)
summarise(gdp_cty_merge)
summarise(gdp_cty_merge, mean(rank))
summarise(gdp_cty_merge, mean(rank, na.rm = true))
summarise(gdp_cty_merge, mean(rank, na.rm = TRUE))
str(gdp_cty_merge)
gdp_cty_tbl_df <- tbl_df(gdp_cty_merge)
gdp_cty_tbl_df
gdp_cty_tbl_df[, mean("Ranking"), Income Group == "High Income OECD"]
gdp_cty_tbl_df[, Income Group == "High Income OECD"]
gdp_cty_tbl_df[, "Income Group" == "High Income OECD"]
gdp_cty_tbl_df[, Income Group]
gdp_cty_tbl_df %>% group_by(Income Group) %>% summarize(avg = mean(Ranking))
gdp_cty_tbl_df %>% group_by("Income Group") %>% summarize(avg = mean(Ranking))
gdp_cty_tbl_df
by_income <- group_by(gdp_cty_tbl_df, Income Group)
by_income <- group_by(gdp_cty_tbl_df, "Income Group")
summarise(by_income, mean(Ranking))
by_income
by_income
arrange(by_income, Income groups())
arrange(by_income, "Income Group"
)
by_income[,"Income Group"]
by_income[,"Income Group" == "High Income: OECD"]
by_income[,"Income Group" %startwith% "High"]
by_income[,"Income Group" %=% "High Income: OECD"
)
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz3()
source('~/ProjetosGit/GettingAndCleaningData/WeekThreeQuiz/week3quiz.R')
quiz3()
quantile( gdp_cty_tbl_df$Ranking, seq(0, 1, 0.2))
q<-quantile( gdp_cty_tbl_df$Ranking, seq(0, 1, 0.2))
i<- group_by(gdp_cty_tbl_df[,(Ranking, 'Income Group') ], 'Income Group')
i<- select(gdp_cty_tbl_df, Ranking, 'Income Group') %>% group_by('Income Group' )
i <- gdp_cty_tbl_df %>% select(Ranking, `Income Group`) %>% filter(!is.na(Ranking)) %>% group_by(`Income Group`)
i
table(q, i)
summarise(i, count(Ranking))
summarise(i, count(as.numeric(Ranking)))
str
str(i)
i
mutate(i, group = as.factor(Income Group))
mutate(i, group = as.factor('Income Group'))
mutate(i, group = as.factor(i$`Income Group`))
View(i)
arrange(i, i$`Income Group`)
i
tail(i)
filter(i, i$Ranking >= 38)
data.table(i)
j <- data.table(i)
j
filter(j, j$Ranking>=38)
filter(j, j$Rankin<>=38)
filter(j, j$Ranking<=38)
filter(j, j$Ranking<=38) %>% arrange(j$`Income Group`)
j %>% filter(j$Ranking<=38) %>% arrange(j$`Income Group`)
j %>% filter(j$Ranking<=38) %>% arrange(j$`Income Group`)[1:38]
k <- j %>% filter(j$Ranking<=38) %>% arrange(j$`Income Group`)
k[1:38]
k <- j %>% filter(Ranking<=38) %>% arrange(j$`Income Group`,)
k <- j %>% filter(Ranking<=38) %>% arrange(`Income Group`,)
k <- j %>% filter(Ranking<=38) %>% arrange(`Income Group`)
k
summary(k)
summary(j)
summary(j, by(j$`Income Group`))
summarise(j, by(j$`Income Group`))
summarise(j, group_by(`Income Group`))
summarise(j, group_by(as.factor(j$`Income Group`)))
summarise(j, group_by((j$`Income Group`)))
group_by(j, `Income Group`)
group_by(j, `Income Group`) %>% summarise(count(... = ))
group_by(j, `Income Group`) %>% summarise(count())
group_by(j, `Income Group`) %>% summarise(count(Ranking))
group_by(j, `Income Group`) %>% summarise(count('Income Group'))
group_by(j, `Income Group`) %>% summarise()
group_by(j, `Income Group`) %>% summarise(Income Group)
group_by(j, `Income Group`) %>% .N
group_by(j, `Income Group`) %>% .n()
group_by(j, `Income Group`) %>%
.N
group_by(j, `Income Group`) %>% summarise(min( na.rm = TRUE))
l<-group_by(j, `Income Group`) %>% summarise(min( na.rm = TRUE))
table(q,l)
q
l
ls()
dir()
rm(list=ls())
load("C:\\Users\\PauloRicardo\\Documents\\ProjetosGit\\GettingAndCleaningData\\CourseProject\\courseProjectEnv.RData")
library(dplyr)
library(data.table)
##Getting variable names for the train and test raw data
feat_df <- tbl_df(fread("UCI HAR Dataset/features.txt"))
## Reading and preparing the train and test data frame 
#tran_df <- tbl_df(read.table("UCI HAR Dataset/train/X_train.txt", colClasses = "numeric", col.names = feat_df$V2))
#test_df <- tbl_df(read.table("UCI HAR Dataset/test/X_test.txt",   colClasses = "numeric", col.names = feat_df$V2))
tran_df <- read.table("UCI HAR Dataset/train/X_train.txt", colClasses = "numeric", col.names = feat_df$V2)
test_df <- read.table("UCI HAR Dataset/test/X_test.txt",   colClasses = "numeric", col.names = feat_df$V2)
# Subsetting train and test data with mean and standard deviation columns
tran_df_ss <-  select(tran_df, contains("mean.."), contains("std.."))
test_df_ss <-  select(test_df, contains("mean.."), contains("std.."))
## getting subject and activity data for train and test
tran_sbjc <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject") 
tran_actv <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "activity")
test_sbjc <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject") 
test_actv <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "activity")
## Adding subject, activity, and observationType columns to table data frames
tran_dft_ss <- tbl_df(cbind(tran_sbjc, tran_actv, tran_df_ss))
tran_dft_ss <- mutate(tran_dft_ss, obsType = "train")
test_dft_ss <- tbl_df(cbind(test_sbjc, test_actv, test_df_ss))
test_dft_ss <- mutate(test_dft_ss, obsType = "test")
## Merging the two table data frames together
full_dft <- full_join(tran_dft_ss, test_dft_ss) 
fix(full_dft)
full_dft
full_dft <- tbl_df(full_join(tran_dft_ss, test_dft_ss) )
full_dft
str(full_dft)
q()
q()
